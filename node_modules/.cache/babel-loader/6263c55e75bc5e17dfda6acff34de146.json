{"ast":null,"code":"export function mergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const arrayHelper = array.slice();\n  const middle = Math.floor(array.length / 2);\n  const leftHalf = array.slice(0, middle);\n  const rightHalf = array.slice(middle);\n  mergeSortHelper(mergeSort(leftHalf), mergeSort(rightHalf), arrayHelper, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(left, right, array, animations) {\n  const sortedArray = new Array(left.length + right.length).fill(null);\n  let i = 0,\n      j = 0,\n      idx = 0;\n\n  while (i < left.length && j < right.length) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (array[i] < array[j]) {\n      animations.push([idx, array[i]]);\n      sortedArray[idx++] = array[i++];\n    } else {\n      animations.push([idx, array[j]]);\n      sortedArray[idx++] = array[j++];\n    }\n  }\n\n  while (i < array.length) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    sortedArray[idx++] = array[i++];\n  }\n\n  while (j < array.length) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    sortedArray[idx++] = array[j++];\n  }\n} // export function mergeSort(array) {\n//     const animations = [];\n//     if (array.length <= 1) return array;\n//     const auxiliaryArray = array.slice();\n//     mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n//     return animations;\n//   }\n//   function mergeSortHelper(\n//     mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n//     if (startIdx === endIdx) return;\n//     const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//     mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n//     mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n//     doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n//   }\n//   function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n//     let k = startIdx;\n//     let i = startIdx;\n//     let j = middleIdx + 1;\n//     while (i <= middleIdx && j <= endIdx) {\n//       animations.push([i, j]);\n//       animations.push([i, j]);\n//       if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n//         animations.push([k, auxiliaryArray[i]]);\n//         mainArray[k++] = auxiliaryArray[i++];\n//       } else {\n//         animations.push([k, auxiliaryArray[j]]);\n//         mainArray[k++] = auxiliaryArray[j++];\n//       }\n//     }\n//     while (i <= middleIdx) {\n//       animations.push([i, i]);\n//       animations.push([i, i]);\n//       animations.push([k, auxiliaryArray[i]]);\n//       mainArray[k++] = auxiliaryArray[i++];\n//     }\n//     while (j <= endIdx) {\n//       animations.push([j, j]);\n//       animations.push([j, j]);\n//       animations.push([k, auxiliaryArray[j]]);\n//       mainArray[k++] = auxiliaryArray[j++];\n//     }\n// }","map":{"version":3,"names":["mergeSort","array","animations","length","arrayHelper","slice","middle","Math","floor","leftHalf","rightHalf","mergeSortHelper","left","right","sortedArray","Array","fill","i","j","idx","push"],"sources":["/Users/pagnavath/Desktop/sorting/src/sortingAlgorithms/mergeSort.jsx"],"sourcesContent":["export function mergeSort(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const arrayHelper = array.slice();\n    const middle = Math.floor(array.length / 2);\n    const leftHalf = array.slice(0, middle);\n    const rightHalf = array.slice(middle);\n    mergeSortHelper(mergeSort(leftHalf), mergeSort(rightHalf), arrayHelper, animations);\n    return animations;\n}\nfunction mergeSortHelper(left, right, array, animations) {\n    const sortedArray = new Array(left.length + right.length).fill(null);\n    let i = 0, j = 0, idx = 0;\n    while (i < left.length && j < right.length) {\n        animations.push([i, j]);\n        animations.push([i, j]);\n        if (array[i] < array[j]) {\n            animations.push([idx, array[i]]);\n            sortedArray[idx++] = array[i++];\n        } else {\n            animations.push([idx, array[j]]);\n            sortedArray[idx++] = array[j++];\n        }\n    }\n    while (i < array.length) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        sortedArray[idx++] = array[i++];\n    }\n    while (j < array.length) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        sortedArray[idx++] = array[j++];\n    }\n}\n// export function mergeSort(array) {\n//     const animations = [];\n//     if (array.length <= 1) return array;\n//     const auxiliaryArray = array.slice();\n//     mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n//     return animations;\n//   }\n//   function mergeSortHelper(\n//     mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n//     if (startIdx === endIdx) return;\n//     const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//     mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n//     mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n//     doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n//   }\n//   function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n//     let k = startIdx;\n//     let i = startIdx;\n//     let j = middleIdx + 1;\n//     while (i <= middleIdx && j <= endIdx) {\n//       animations.push([i, j]);\n//       animations.push([i, j]);\n//       if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n//         animations.push([k, auxiliaryArray[i]]);\n//         mainArray[k++] = auxiliaryArray[i++];\n//       } else {\n//         animations.push([k, auxiliaryArray[j]]);\n//         mainArray[k++] = auxiliaryArray[j++];\n//       }\n//     }\n//     while (i <= middleIdx) {\n//       animations.push([i, i]);\n//       animations.push([i, i]);\n//       animations.push([k, auxiliaryArray[i]]);\n//       mainArray[k++] = auxiliaryArray[i++];\n//     }\n//     while (j <= endIdx) {\n//       animations.push([j, j]);\n//       animations.push([j, j]);\n//       animations.push([k, auxiliaryArray[j]]);\n//       mainArray[k++] = auxiliaryArray[j++];\n//     }\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module"}