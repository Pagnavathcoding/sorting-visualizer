{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  //takes a unsorted array\n  //initiate a new array for record and animation\n  const animations = []; //if array size is 1, it is sorted, return array without doing merge sort\n\n  if (array.length <= 1) return array; //sort the array using merge sort and return a animation array\n\n  mergeSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, animations) {\n  // if starting and end is the same, array is sorted, return array\n  if (startIdx === endIdx) return; //find out the middle index\n\n  const middleIdx = Math.floor((startIdx + endIdx) / 2); //calling recursively with first part of the array\n\n  mergeSortHelper(mainArray, startIdx, middleIdx, animations); //calling recursively with second part of the array\n\n  mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations); //once two smaller pieces are ready, merge them\n\n  doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  const tempArray = mainArray.slice();\n\n  while (i <= middleIdx && j <= endIdx) {\n    //comparing i and j, both the start of each array\n    //record it in animation array\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (tempArray[i] <= tempArray[j]) {\n      animations.push([k, tempArray[i]]); //following is equivalent to mainArray[k]=auxiliaryArray[i]; k++, i++\n      //adjusts the true mainArray\n\n      mainArray[k++] = tempArray[i++];\n    } else {\n      animations.push([k, tempArray[j]]);\n      mainArray[k++] = tempArray[j++];\n    }\n  } //for cases that one side is smaller than the other side\n  //just move the sorted items on that side over to mainArray\n\n\n  while (i <= middleIdx) {\n    animations.push([k, i]);\n    animations.push([k, i]);\n    animations.push([k, tempArray[i]]);\n    mainArray[k++] = tempArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([k, j]);\n    animations.push([k, j]);\n    animations.push([k, tempArray[j]]);\n    mainArray[k++] = tempArray[j++];\n  }\n}","map":{"version":3,"names":["getMergeSortAnimations","array","animations","length","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","tempArray","slice","push"],"sources":["/Users/pagnavath/Desktop/sorting/src/sortingAlgorithms/mergeSort.jsx"],"sourcesContent":["export function getMergeSortAnimations(array) {\n    //takes a unsorted array\n    //initiate a new array for record and animation\n    const animations = [];\n    //if array size is 1, it is sorted, return array without doing merge sort\n    if (array.length <= 1) return array;\n    //sort the array using merge sort and return a animation array\n    mergeSortHelper(array, 0, array.length - 1, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(mainArray, startIdx, endIdx, animations) {\n    // if starting and end is the same, array is sorted, return array\n    if (startIdx === endIdx) return;\n    //find out the middle index\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    //calling recursively with first part of the array\n    mergeSortHelper(mainArray, startIdx, middleIdx, animations);\n    //calling recursively with second part of the array\n    mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\n    //once two smaller pieces are ready, merge them\n    doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n  }\n  \n  function doMerge(mainArray, startIdx, middleIdx, endIdx, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    const tempArray = mainArray.slice();\n    while (i <= middleIdx && j <= endIdx) {\n      //comparing i and j, both the start of each array\n      //record it in animation array\n      animations.push([i, j]);\n      animations.push([i, j]);\n      if (tempArray[i] <= tempArray[j]) {\n        animations.push([k, tempArray[i]]);\n        //following is equivalent to mainArray[k]=auxiliaryArray[i]; k++, i++\n        //adjusts the true mainArray\n        mainArray[k++] = tempArray[i++];\n      } else {\n        animations.push([k, tempArray[j]]);\n        mainArray[k++] = tempArray[j++];\n      }\n    }\n    //for cases that one side is smaller than the other side\n    //just move the sorted items on that side over to mainArray\n    while (i <= middleIdx) {\n      animations.push([k, i]);\n      animations.push([k, i]);\n      animations.push([k, tempArray[i]]);\n      mainArray[k++] = tempArray[i++];\n    }\n    while (j <= endIdx) {\n      animations.push([k, j]);\n      animations.push([k, j]);\n      animations.push([k, tempArray[j]]);\n      mainArray[k++] = tempArray[j++];\n    }\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}