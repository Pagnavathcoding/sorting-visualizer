{"ast":null,"code":"export function mergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  mergeSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(mainArray, startIdx, middleIdx, animations);\n  mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  const tempArray = mainArray.slice();\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (tempArray[i] <= tempArray[j]) {\n      animations.push([k, tempArray[i]]);\n      mainArray[k++] = tempArray[i++];\n    } else {\n      animations.push([k, tempArray[j]]);\n      mainArray[k++] = tempArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([k, i]);\n    animations.push([k, i]);\n    animations.push([k, tempArray[i]]);\n    mainArray[k++] = tempArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([k, j]);\n    animations.push([k, j]);\n    animations.push([k, tempArray[j]]);\n    mainArray[k++] = tempArray[j++];\n  }\n}","map":{"version":3,"names":["mergeSort","array","animations","length","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","tempArray","slice","push"],"sources":["/Users/pagnavath/Desktop/All/sorting/src/sortingAlgorithms/mergeSort.jsx"],"sourcesContent":["export function mergeSort(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    mergeSortHelper(array, 0, array.length - 1, animations);\n    return animations;\n}\n  \nfunction mergeSortHelper(mainArray, startIdx, endIdx, animations) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(mainArray, startIdx, middleIdx, animations);\n    mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n}\n  function doMerge(mainArray, startIdx, middleIdx, endIdx, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    const tempArray = mainArray.slice();\n    while (i <= middleIdx && j <= endIdx) {\n      animations.push([i, j]);\n      animations.push([i, j]);\n      if (tempArray[i] <= tempArray[j]) {\n        animations.push([k, tempArray[i]]);\n        mainArray[k++] = tempArray[i++];\n      } else {\n        animations.push([k, tempArray[j]]);\n        mainArray[k++] = tempArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      animations.push([k, i]);\n      animations.push([k, i]);\n      animations.push([k, tempArray[i]]);\n      mainArray[k++] = tempArray[i++];\n    }\n    while (j <= endIdx) {\n      animations.push([k, j]);\n      animations.push([k, j]);\n      animations.push([k, tempArray[j]]);\n      mainArray[k++] = tempArray[j++];\n    }\n  }"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;EAC7B,MAAMC,UAAU,GAAG,EAAnB;EACA,IAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;EACvBG,eAAe,CAACH,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BD,UAA7B,CAAf;EACA,OAAOA,UAAP;AACH;;AAED,SAASE,eAAT,CAAyBC,SAAzB,EAAoCC,QAApC,EAA8CC,MAA9C,EAAsDL,UAAtD,EAAkE;EAC9D,IAAII,QAAQ,KAAKC,MAAjB,EAAyB;EACzB,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,GAAGC,MAAZ,IAAsB,CAAjC,CAAlB;EACAH,eAAe,CAACC,SAAD,EAAYC,QAAZ,EAAsBE,SAAtB,EAAiCN,UAAjC,CAAf;EACAE,eAAe,CAACC,SAAD,EAAYG,SAAS,GAAG,CAAxB,EAA2BD,MAA3B,EAAmCL,UAAnC,CAAf;EACAS,OAAO,CAACN,SAAD,EAAYC,QAAZ,EAAsBE,SAAtB,EAAiCD,MAAjC,EAAyCL,UAAzC,CAAP;AACH;;AACC,SAASS,OAAT,CAAiBN,SAAjB,EAA4BC,QAA5B,EAAsCE,SAAtC,EAAiDD,MAAjD,EAAyDL,UAAzD,EAAqE;EACnE,IAAIU,CAAC,GAAGN,QAAR;EACA,IAAIO,CAAC,GAAGP,QAAR;EACA,IAAIQ,CAAC,GAAGN,SAAS,GAAG,CAApB;EACA,MAAMO,SAAS,GAAGV,SAAS,CAACW,KAAV,EAAlB;;EACA,OAAOH,CAAC,IAAIL,SAAL,IAAkBM,CAAC,IAAIP,MAA9B,EAAsC;IACpCL,UAAU,CAACe,IAAX,CAAgB,CAACJ,CAAD,EAAIC,CAAJ,CAAhB;IACAZ,UAAU,CAACe,IAAX,CAAgB,CAACJ,CAAD,EAAIC,CAAJ,CAAhB;;IACA,IAAIC,SAAS,CAACF,CAAD,CAAT,IAAgBE,SAAS,CAACD,CAAD,CAA7B,EAAkC;MAChCZ,UAAU,CAACe,IAAX,CAAgB,CAACL,CAAD,EAAIG,SAAS,CAACF,CAAD,CAAb,CAAhB;MACAR,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBG,SAAS,CAACF,CAAC,EAAF,CAA1B;IACD,CAHD,MAGO;MACLX,UAAU,CAACe,IAAX,CAAgB,CAACL,CAAD,EAAIG,SAAS,CAACD,CAAD,CAAb,CAAhB;MACAT,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBG,SAAS,CAACD,CAAC,EAAF,CAA1B;IACD;EACF;;EACD,OAAOD,CAAC,IAAIL,SAAZ,EAAuB;IACrBN,UAAU,CAACe,IAAX,CAAgB,CAACL,CAAD,EAAIC,CAAJ,CAAhB;IACAX,UAAU,CAACe,IAAX,CAAgB,CAACL,CAAD,EAAIC,CAAJ,CAAhB;IACAX,UAAU,CAACe,IAAX,CAAgB,CAACL,CAAD,EAAIG,SAAS,CAACF,CAAD,CAAb,CAAhB;IACAR,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBG,SAAS,CAACF,CAAC,EAAF,CAA1B;EACD;;EACD,OAAOC,CAAC,IAAIP,MAAZ,EAAoB;IAClBL,UAAU,CAACe,IAAX,CAAgB,CAACL,CAAD,EAAIE,CAAJ,CAAhB;IACAZ,UAAU,CAACe,IAAX,CAAgB,CAACL,CAAD,EAAIE,CAAJ,CAAhB;IACAZ,UAAU,CAACe,IAAX,CAAgB,CAACL,CAAD,EAAIG,SAAS,CAACD,CAAD,CAAb,CAAhB;IACAT,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBG,SAAS,CAACD,CAAC,EAAF,CAA1B;EACD;AACF"},"metadata":{},"sourceType":"module"}